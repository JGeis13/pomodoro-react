{"version":3,"file":"static/webpack/static/development/pages/index.js.1ab1cf0cc2541bc42930.hot-update.js","sources":["webpack:///./components/Clock.jsx","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js"],"sourcesContent":["import React, {Component} from 'react'\nimport Settings from './Settings'\nimport accurateInterval from '../functions/accurateInterval'\n\nexport default class Clock extends Component {\n  // persist timer using local storage\n  // since using Date as timer, can it keep 'running' when app is closed? \n  constructor(props){\n    super(props);\n    this.defaultVals = [5, 25];\n    this.state = {\n      breakTime: this.defaultVals[0],\n      sessionTime: this.defaultVals[1],\n      currentType: 'session',\n      displayTime: this.defaultVals[1] * 60,\n      start: null,\n      timer: '',\n      isActive: false,\n    }\n\n  }\n  // Lifecycle Hooks\n  componentDidMount(){\n    //this.timer = setInterval(this.tick, 200);\n  }\n  componentWillUnmout(){\n    this.state.timer.cancel();\n  }\n\n  tick = () => {\n    let newTime = this.state.displayTime - 1;\n    this.setState({\n      displayTime: newTime,\n    });\n    // !! Handle end of timer\n    if(newTime == 0) document.querySelector('#beep').play();\n    if(newTime < 0) return this.switchModes();\n  }\n\n  toggleSettings(e){\n    let btn = e.target;\n    let bool = btn.parentNode.classList.toggle('closed');\n    if(bool){\n      btn.style.transform = 'translateX(-311px) rotate(360deg)';\n      btn.innerText = 'settings';\n      btn.style.color = 'var(--secondary-color)';\n    }\n    else {\n      btn.style.transform = 'translateX(0px) rotate(0deg)';\n      btn.innerText = 'clear';\n      btn.style.color = 'var(--tertiary-color)';\n    }\n  }\n\n  switchModes = () => {\n    this.state.timer.cancel();\n    let newType = this.state.currentType == 'session' ? 'break' : 'session';\n    this.setState( prevState => ({\n      currentType: newType,\n      displayTime: prevState[newType + 'Time'] * 60,\n      start: Date.now(),\n      isActive: true,\n    }));\n    //this.timer = setInterval(this.tick, 200);\n    this.state.timer = accurateInterval( this.tick, 1000);\n  }\n\n  handleSettingsChange = (typeStr, operation) => {\n    if(this.state.isActive) return;\n    let s = this.state.sessionTime, b = this.state.breakTime;\n    if(typeStr == 'session'){\n      if(operation == '-') s--;\n      else if(operation == '+') s++;\n      if(s > 60 || s < 1) return;\n      this.setState({sessionTime: s,}); \n    }\n    else if(typeStr == 'break'){\n      if(operation == '-') b--;\n      else if(operation == '+') b++;\n      if(b > 60 || b < 1) return;\n      this.setState({breakTime: b});\n    }\n    if(this.state.currentType == 'session'){\n      this.setState({\n        displayTime: s * 60,\n      });\n    }\n    else if(this.state.currentType == 'break'){\n      this.setState({\n        displayTime: b * 60,\n      });\n    }\n  }\n\n  startStop = (e) => {\n    if(this.state.isActive){\n      document.querySelector('#start_stop i').innerText = 'play_arrow';\n      this.state.timer.cancel();\n      this.setState({isActive: false});\n    }\n    else {\n      document.querySelector('#start_stop i').innerText = 'pause';\n      this.setState({\n        isActive: true,\n      });\n      this.state.timer = accurateInterval(this.tick, 1000);\n    }\n  }\n\n  reset = () => {\n    if(this.state.timer != '') this.state.timer.cancel();\n    this.setState({\n      breakTime: this.defaultVals[0],\n      sessionTime: this.defaultVals[1],\n      currentType: 'session',\n      displayTime: this.defaultVals[1] * 60,\n      start: null,\n      isActive: false,\n    });\n    document.querySelector('#beep').pause();\n    document.querySelector('#beep').currentTime = 0;\n  }\n\n  restart = () => {\n    this.state.timer.cancel();\n    document.querySelector('#start_stop i').innerText = 'play_arrow';\n    this.setState({\n      displayTime: this.state[this.state.currentType + 'Time'] * 60,\n      start: null,\n      isActive: false,\n    });\n  }\n\n  formatDisplayTime = () => {\n    let mins = Math.floor(this.state.displayTime / 60);\n    let secs = this.state.displayTime % 60;\n    if(mins < 10 ) mins = '0' + mins.toString();\n    if(secs < 10) secs = '0' + secs.toString();\n    return mins + ':' + secs;\n  }\n\n  render(){\n    return (\n      <div id='clock'>\n        <h2>Pomodoro Clock</h2>\n        <Settings  \n          breakTime={this.state.breakTime} \n          sessionTime={this.state.sessionTime}\n          settingsChange={this.handleSettingsChange}\n          reset={this.reset}\n          toggleShow={this.toggleSettings}\n          />\n        <div id='main'>\n          <div className='circleDisplay'>\n            <label id='timer-label'>{this.state.currentType}</label>\n            <label id='time-left'>{this.formatDisplayTime()}</label>\n            <audio id='beep'><source src='https://soundbible.com/mp3/Electronic_Chime-KevanGC-495939803.mp3' type='audio/mpeg' /></audio>\n          </div>\n        </div>\n        <div className='controls'>\n          <button className='btn' onClick={this.restart} id='restart'>\n            <i className=\"material-icons\">replay</i>\n          </button>\n          <button className='btn btn-main' onClick={this.startStop} id='start_stop'>\n            <i className=\"material-icons\">play_arrow</i>\n          </button>\n          <button className='btn' onClick={this.getInfo} id='info'>\n            <i className=\"material-icons\">info</i>\n          </button>\n        </div>\n        <div className='credits'>\n          Created by Jarick Geiselmayr\n        </div>\n      </div>\n    );\n  }\n}","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAuBA;AACA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AA/BA;AAgDA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AACA;AAKA;AACA;AACA;AA3DA;AA6DA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAtFA;AAwFA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AArGA;AAuGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AACA;AAnHA;AAqHA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA7HA;AA+HA;AACA;AACA;AACA;AACA;AACA;AACA;AAnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AAaA;AACA;AACA;;;AAAA;AAEA;;;AACA;AACA;AACA;;;AAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAyFA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA3KA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}